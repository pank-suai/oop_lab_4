#import "lib/gost.typ": init

#show: init

= Цель работы

Изучить механизм создания нового класса на основе уже существующего,
варианты доступа к элементам базового класса из производного.

= Вариант задания

В работе необходимо реализовать базовый класс заданной структуры. Поля данных в
базовом классе должны быть защищенными (с модификатором protected). На основе
базового класса создать производные классы. В нём предусмотреть конструктор для
установки начальных значений полей. Продемонстрировать доступ к защищенным
данным базового класса из производных. Создать объекты производных классов.
Продемонстрировать работу всех методов, реализуемых в классах.

Вариант 5.

Создать класс Жилище(название, общая площадь, базовая стоимость
проживания человека в сутки, количество жильцов). В классе должен быть метод вывода
характеристик жилья на экран. Создать на основе класса Жилище производные классы:
Дом (из какого материала, частный или аренда, стоимость аренды), Коттедж(площадь
земельного участка, количество этажей), Хостел(на какое количество жителей). В каждом
производном классе предусмотреть метод расчета стоимости проживания в сутки.

= Листинг программы


housing.hpp
#raw(read("../src/housing.hpp"), lang: "cpp")

house.hpp
#raw(read("../src/house.hpp"), lang: "cpp")

cottage.hpp
#raw(read("../src/cottage.hpp"), lang: "cpp")

hostel.hpp
#raw(read("../src/hostel.hpp"), lang: "cpp")

main.cpp
#raw(read("../src/main.cpp"), lang: "cpp")

= Скриншоты работы программы

#figure(image("./images/001_screenshot.png"), width: 70%)

= Выводы

Изучил механизм создания нового класса на основе уже существующего,
варианты доступа к элементам базового класса из производного.
